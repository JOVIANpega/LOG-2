
curl "https://acli.atlassian.com/windows/latest/acli_windows_amd64/acli.exe"



git hub commit "V1.5.6" "優化按鍵視窗"
git hub branch 轉成 main 
提交訊息：V1.5.1 - 修正PASS測項retry判斷邏輯和展開內容


git hub commit "V1.5.7" "優化PASS 顯示內容"
已成功推送到：https://github.com/JOVIANpega/LOG_analyser

pyinstaller --onefile --noconsole  main.py




# 1️⃣ 把所有變更（已追蹤與未追蹤的檔案）加入暫存區
git add .

# 2️⃣ 提交變更，附上版本與描述
git commit -m "V1.5.7 優化PASS 顯示內容"

# 3️⃣ 推送到 GitHub main 分支
git push origin main




預覽視窗點擊後彈出測項指令內容
我要做優化
首先最上面要整理並顯示所有> and < 的內容，並且1234條列出 
例如:

1.
> :GetVal,"$g5GModel"
< RG530F-NA

2.
> :Utility.PY,"D:\Centimani_Kangaroo_UpdateFW\py\adb.py","shell atcli at+qgmr","ON","-1","0"
< 
< standard output#

====

未找到指令時 例如下面就顯示 @Write ISN to MB 不要顯示 	未找到指令 

步驟 1: Write ISN to MB
     1. 2025/03/27 01:58:26 [1]	Do @STEP012@Write ISN to MB
     2. 2025/03/27 01:58:26 [1]	Check ISN from MB skips by ExecMode = 6.
     3. 2025/03/27 01:58:26 [1]	:@STEP012@Write ISN to MB Test is Pass ! 		----- 0 Sec.

Do @STEP012@Write ISN to MB


這種未找到指令 修正這個現象
如下面就顯示 @CheckRoute ，目前是 未找到指令 
如下面就顯示 @READ ME 不要顯示 	未找到指令 
步驟 1: CheckRoute
     1. 2025/03/27 01:58:13 [1]	Do @STEP002@CheckRoute
     2. 2025/03/27 01:58:13 [1]	Run B7PL025-000:Show ISN to UI	Mode: 1, Retry: 4
     3. [01:58:13.472][PC] [Show ISN to UI]++
     4. 2025/03/27 01:58:13 [1]	> :ShowISN,"LoopRunning"
     5. 2025/03/27 01:58:13 [1]	< 0
     6. [01:58:13.478][PC] [Show ISN to UI]--
     7. 2025/03/27 01:58:13 [1]	[PC] [Show ISN to UI] ~~ TestTime:0.0077035 sec
     8. 2025/03/27 01:58:13 [1]	Run B7PL025-001:Disconnect,"UART"	Mode: 1, Retry: 4
     9. [01:58:13.478][PC] [Disconnect,"UART"]++
    10. 2025/03/27 01:58:13 [1]	> :Disconnect,"UART"
    11. 2025/03/27 01:58:13 [1]	< 0
    12. [01:58:13.487][PC] [Disconnect,"UART"]--
    13. 2025/03/27 01:58:13 [1]	[PC] [Disconnect,"UART"] ~~ TestTime:0.0090226 sec
    14. 2025/03/27 01:58:13 [1]	B7PL025-001:@STEP002@CheckRoute Test is Pass ! 		----- 0.0167261 Sec.

步驟 2: READ ME
     1. 2025/03/27 01:58:13 [1]	Do @STEP003@READ ME
     2. 2025/03/27 01:58:13 [1]	Run B7PL025-003:Pop window	Mode: 0, Retry: 4
     3. [01:58:13.498][PC] [Pop window]++
     4. 2025/03/27 01:58:13 [1]	> :ShowConfirmBox,"you need SD and SIM","YES"
     5. 2025/03/27 01:58:13 [1]	Skip by LoopRunning is enable.
     6. 2025/03/27 01:58:13 [1]	< YES
     7. [01:58:13.507][PC] [Pop window]--
     8. 2025/03/27 01:58:13 [1]	[PC] [Pop window] ~~ TestTime:0.0091451 sec
     9. 2025/03/27 01:58:13 [1]	B7PL025-003:@STEP003@READ ME Test is Pass ! 		----- 0.0091451 Sec.





====

FAIL測試標籤 
EX: 下面顯示這一區塊內容 錯誤原因自動顯示
內容 只要 FAIL 原因 如下範例

錯誤原因擷取這段文字 例如': 
2025/08/07 08:53:36 [1]	VSCH026-043:Chec Frimware version is Fail ! <ErrorCode: BSFR18>     ----- 10.0648777 Sec.

大字體是顯示這文字
Chec Frimware version is Fail 

其他維持不用修改


====

以上修改做完只要 顯示做完了 不用解釋一大堆你在幹嘛

GUI的標籤頁 鼠標靠近顯示深綠色黑色文字

FAIL測試標籤 再分割成兩個上下視窗
上面維持不變
下面則顯示 FAIL的錯誤字串 
上下可以調整拖拉大小 並記錄在設定區塊 關閉開啟GUI要寫入\讀取

EX: 下面顯示這一區塊內容 這邊鼠標不用靠近錯誤原因自己就顯示
縣市內容 不是全部錯誤字串 只要 FAIL 原因 如下範例

不要顯示這麼多文字
2025/08/07 09:27:53 [1]	IPIO009-0580:Check Battery_tempture is Fail ! <ErrorCode: HHFE15>     ----- 53.2010722 Sec.
應該這樣顯示
主題就是 Check Battery_tempture is Fail (大字體 紅色文字 白底)

其他錯誤就白底黑色顯示
 370. 2025/08/07 09:17:45 [1]	Check Battery_tempture Result: gBattery_tempture=[   91.877681] nvt_i2c 2f014e000.i2c: i2c_nvtim_xfer_msg(773) NACK!
 371. 2025/08/07 09:17:45 [1]	CurrentTestID:IPIO009-0580 - The validation: gBattery_tempture = [   91.877681] nvt_i2c 2f014e000.i2c: i2c_nvtim_xfer_msg(773) NACK! (10,50)
 372. 2025/08/07 09:17:45 [1]	The type of [   91.877681] nvt_i2c 2f014e000.i2c: i2c_nvtim_xfer_msg(773) NACK! is not int or float.
 373. [09:17:45.146][PC] [Check Battery_tempture]--
 374. 2025/08/07 09:17:45 [1]	[PC] [Check Battery_tempture] ~~ TestTime:5.0073274 sec
 375. 2025/08/07 09:17:45 [1]	IPIO009-0580:Check Battery_tempture is Fail ! <ErrorCode: HHFE15>     ----- 53.2126816 Sec.
 376. 2025/08/07 09:17:45 [1]	DUT Test Completed !        ----- 53.2223204 Sec.
 377. 2025/08/07 09:17:47 [1]	All Test Aborted !  ErrorCode: HHFE15     ----- 112.2097647 Sec.
 378. 2025/08/07 09:17:47 [1]	TotalCount:13-YR:31%
 379. 2025/08/07 09:17:47 [1]	Report name: Funtion_WE253100001_2025-08-07_09-17-47.ct
 380. 2025/08/07 09:17:47 [1]	Execute Phase 97 Test.

字體大小也要聯動這邊 清除結果按鈕 也要清除這邊
以上修改做完只要 顯示做完了 不用解釋一大堆你在幹嘛


現在來修改FAIL測項標籤 
也要依照PASS的測項標籤 邏輯完成
雖然是FAIL 可是也有PASS的 ，PASS的就顯示在PASS區塊
FAIL就只顯示FAIL項目


PASS 測項標籤
未找到指令 通常代表腳本 跳過這個項目 沒下指令沒做什麼事情
看能否把他們蒐集成一大塊
例如這樣 就只要顯示一個 未找到指令 ，例如只有兩個就顯示未找到指令x2
向下面這樣 就顯示 未找到指令x6 點進去開出的視窗就是蒐集這六個

025/08/07 09:10:02 [1]	B7PL025-007:@STEP005@CheckRoute Test is Pass ! 		----- 0.0096335 Sec.
2025/08/07 09:10:02 [1]	Do @STEP006@GETSSN
2025/08/07 09:10:02 [1]	:@STEP006@GETSSN Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP007@GET sfisHW
2025/08/07 09:10:02 [1]	:@STEP007@GET sfisHW Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP008@GET sfisSKU
2025/08/07 09:10:02 [1]	:@STEP008@GET sfisSKU Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP009@GET sfisETH MAC
2025/08/07 09:10:02 [1]	:@STEP009@GET sfisETH MAC Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP010@GET sfisIVKEY
2025/08/07 09:10:02 [1]	Pop window skips by ExecMode = 6.
2025/08/07 09:10:02 [1]	:@STEP010@GET sfisIVKEY Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP011@GET sfisMOKP_SN

展開內容就這寫 集合 

且照著順序作 如果下個測試項目有測試 就繼續分類 直到在遇到未找到指令 
不要一次蒐集全部 目前是這樣子 這是錯誤的




需要你修改 測項指令內容彈出來的視窗 上一頁下一頁 可以一直按，直到最後一個測試項目

未找到指令需要再修改

PASS 測項標籤
未找到指令 通常代表腳本 跳過這個項目 
看能否把他們蒐集成一大塊
例如這樣 就只要顯示一個 未找到指令 ，展開內容就這寫 集合 且照著順序作 不要一次蒐集全部
例如只有兩個就顯示未找到指令x2

025/08/07 09:10:02 [1]	B7PL025-007:@STEP005@CheckRoute Test is Pass ! 		----- 0.0096335 Sec.
2025/08/07 09:10:02 [1]	Do @STEP006@GETSSN
2025/08/07 09:10:02 [1]	:@STEP006@GETSSN Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP007@GET sfisHW
2025/08/07 09:10:02 [1]	:@STEP007@GET sfisHW Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP008@GET sfisSKU
2025/08/07 09:10:02 [1]	:@STEP008@GET sfisSKU Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP009@GET sfisETH MAC
2025/08/07 09:10:02 [1]	:@STEP009@GET sfisETH MAC Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP010@GET sfisIVKEY
2025/08/07 09:10:02 [1]	Pop window skips by ExecMode = 6.
2025/08/07 09:10:02 [1]	:@STEP010@GET sfisIVKEY Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP011@GET sfisMOKP_SN


PASS 測像有的會顯示紅色文字 後面retry 2
這是什麼邏輯算出來的呢? 我檢查原始LOG
VALO360_TestFlow_20250423_after_Function.xlsx.
例如:@STEP021@Check FW version

我沒看到他做兩次阿 為什麼會顯示紅色文字 檢查看他的邏輯


git hub commit "V1.5.1"
提交訊息：V1.5.1 - 修正PASS測項retry判斷邏輯和展開內容
已成功推送到：https://github.com/JOVIANpega/LOG_analyser

還原本地 使用 github 
6d4c522
這一版本還原

        - 檢查是否有 "Retry: N" 關鍵字，若有且N>1 不需要紅字註記了 用黑色文字

PASS 測項標籤
未找到指令 通常代表腳本 跳過這個項目 
看能否把他們蒐集成一大塊
例如這樣 就只要顯示一個 未找到指令 ，展開內容就這寫 集合 且照著順序作 不要一次蒐集全部
例如只有兩個就顯示未找到指令x2

025/08/07 09:10:02 [1]	B7PL025-007:@STEP005@CheckRoute Test is Pass ! 		----- 0.0096335 Sec.
2025/08/07 09:10:02 [1]	Do @STEP006@GETSSN
2025/08/07 09:10:02 [1]	:@STEP006@GETSSN Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP007@GET sfisHW
2025/08/07 09:10:02 [1]	:@STEP007@GET sfisHW Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP008@GET sfisSKU
2025/08/07 09:10:02 [1]	:@STEP008@GET sfisSKU Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP009@GET sfisETH MAC
2025/08/07 09:10:02 [1]	:@STEP009@GET sfisETH MAC Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP010@GET sfisIVKEY
2025/08/07 09:10:02 [1]	Pop window skips by ExecMode = 6.
2025/08/07 09:10:02 [1]	:@STEP010@GET sfisIVKEY Test is Pass ! 		----- 0 Sec.
2025/08/07 09:10:02 [1]	Do @STEP011@GET sfisMOKP_SN





測試區塊 有些會下好幾個指令的 把他這樣顯示 只要是下指令 出現> 的都列出來
例如:
Check FW version
	**:Connect,"UART"
	**
	**:Delay,"5000"
	** pegacmd version
	** diag -g status eth0
	** :Delay,"0"
以此類推 把他們這樣顯示出來

1. 2025/08/07 09:10:53 [1]	Do @STEP021@Check FW version
   2. 2025/08/07 09:10:53 [1]	Run B7PL025-040:Open UART	Mode: 1, Retry: 3
   3. [09:10:53.063][PC] [Open UART]++
   4. 2025/08/07 09:10:53 [1]	> :Connect,"UART"
   5. 2025/08/07 09:10:53 [1]	< 0
   6. [09:10:53.063][PC] [Open UART]--
   7. 2025/08/07 09:10:53 [1]	[PC] [Open UART] ~~ TestTime:0 sec
   8. 2025/08/07 09:10:53 [1]	Run B7PL025-041:BOOT UP OK	Mode: 2, Retry: 3
   9. [09:10:53.063][PC] [BOOT UP OK]++
  10. 2025/08/07 09:10:53 [1]	(UART) > 
  11. 
  12. 2025/08/07 09:10:53 [1]	(UART) < 
  13. root@NOKIA360Camera-Valo360:/root$ 
  14. root@NOKIA360Camera-Valo360:/root$ 
  15. [09:10:53.103][PC] [BOOT UP OK]--
  16. 2025/08/07 09:10:53 [1]	[PC] [BOOT UP OK] ~~ TestTime:0.0402914 sec
  17. 2025/08/07 09:10:53 [1]	Run B7PL025-042:Wait	Mode: 0, Retry: 3
  18. 2025/08/07 09:10:53 [1]	> :Delay,"5000"
  19. 2025/08/07 09:10:58 [1]	< 0
  20. 2025/08/07 09:10:58 [1]	Run VSCH026-043:Chec Frimware version	Mode: 0, Retry: 3
  21. [09:10:58.112][DUT] [Chec Frimware version]++
  22. 2025/08/07 09:10:58 [1]	(UART) > pegacmd version
  23. 
  24. 2025/08/07 09:10:58 [1]	(UART) < pegacmd version
  25. 0.5.4.37.0_b5838c4
  26. root@NOKIA360Camera-Valo360:/root$ 
  27. root@NOKIA360Camera-Valo360:/root$ 
  28. [09:10:58.171][DUT] [Chec Frimware version]--
  29. 2025/08/07 09:10:58 [1]	[DUT] [Chec Frimware version] ~~ TestTime:0.0596153 sec
  30. 2025/08/07 09:10:58 [1]	Run IOET151-044:Check ETH LINK status	Mode: 1, Retry: 3
  31. [09:10:58.171][PC] [Check ETH LINK status]++
  32. 2025/08/07 09:10:58 [1]	(UART) > diag -g status eth0
  33. 
  34. 2025/08/07 09:10:59 [1]	(UART) < diag -g status eth0
  35. link: up
  36. duplex: full
  37. speed: 1000
  38. root@NOKIA360Camera-Valo360:/root$ 
  39. root@NOKIA360Camera-Valo360:/root$ AT+CFUN=5
  40. OK
  41. 
  42. [09:10:59.191][PC] [Check ETH LINK status]--
  43. 2025/08/07 09:10:59 [1]	[PC] [Check ETH LINK status] ~~ TestTime:1.0198073 sec
  44. 2025/08/07 09:10:59 [1]	Run B7PL025-045:Wait	Mode: 0, Retry: 3
  45. [09:10:59.191][PC] [Wait]++
  46. 2025/08/07 09:10:59 [1]	> :Delay,"0"
  47. 2025/08/07 09:10:59 [1]	< 0
  48. [09:10:59.191][PC] [Wait]--
  49. 2025/08/07 09:10:59 [1]	[PC] [Wait] ~~ TestTime:0 sec
  50. 2025/08/07 09:10:59 [1]	B7PL025-045:@STEP021@Check FW version Test is Pass ! 		----- 6.1281642 Sec.




不對 應該基於
Do @STEP048@CHECK SD  這是起始點

@STEP048@CHECK SD  Inserted Test is Pass ! 這是結尾

你要顯示的就是夾在這中間的區塊所有內容 包含頭跟尾 

另外 展開的區塊 加上1234 的數字編碼 


當您測試完畢並關閉GUI後，我會：
打包成EXE檔案
更新GitHub版本
更新版本資訊

2025/07/08 14:11:58 [1]	Do @STEP048@CHECK SD  Inserted
2025/07/08 14:11:58 [1]	Run NBHM004-105:SD card inserted	Mode: 1, Retry: 3
[14:11:58.393][DUT] [SD card inserted]++
2025/07/08 14:11:58 [1]	(UART) > diag -g status sd

2025/07/08 14:11:58 [1]	(UART) < diag -g status sd
removed
root@NOKIA360Camera-WE251300012:/root$ 
root@NOKIA360Camera-WE2513000
[14:11:58.421][DUT] [SD card inserted]--
2025/07/08 14:11:58 [1]	[DUT] [SD card inserted] ~~ TestTime:0.0304165 sec
2025/07/08 14:11:58 [1]	Run PDSC003-106:Check SD RW	Mode: 1, Retry: 3
[14:11:58.421][DUT] [Check SD RW]++
2025/07/08 14:11:58 [1]	(UART) > mount |grep sd

2025/07/08 14:11:58 [1]	(UART) < mount |grep sd
root@NOKIA360Camera-WE251300012:/root$ 
root@NOKIA360Camera-WE251300012:/root$ 
[14:11:58.451][DUT] [Check SD RW]--
2025/07/08 14:11:58 [1]	[DUT] [Check SD RW] ~~ TestTime:0.0316031 sec
2025/07/08 14:11:58 [1]	Run PDSC003-107:Check SD RW	Mode: 1, Retry: 3
[14:11:58.453][DUT] [Check SD RW]++
2025/07/08 14:11:58 [1]	(UART) > echo "1234" > /mnt/sd/test_sd

2025/07/08 14:11:58 [1]	(UART) < echo "1234" > /mnt/sd/test_sd
root@NOKIA360Camera-WE251300012:/root$ 
root@NOKIA360Camera-WE251300012:/root$ 
[14:11:58.482][DUT] [Check SD RW]--
2025/07/08 14:11:58 [1]	[DUT] [Check SD RW] ~~ TestTime:0.0296354 sec
2025/07/08 14:11:58 [1]	Run PDSC003-108:Check SD RW	Mode: 1, Retry: 3
[14:11:58.485][DUT] [Check SD RW]++
2025/07/08 14:11:58 [1]	(UART) > cat /mnt/sd/test_sd

2025/07/08 14:11:58 [1]	(UART) < cat /mnt/sd/test_sd
1234
root@NOKIA360Camera-WE251300012:/root$ 
root@NOKIA360Camera-WE251300012:/root$ 
[14:11:58.513][DUT] [Check SD RW]--
2025/07/08 14:11:58 [1]	[DUT] [Check SD RW] ~~ TestTime:0.0311942 se